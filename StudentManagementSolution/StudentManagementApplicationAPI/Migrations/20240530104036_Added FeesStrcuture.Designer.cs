// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementApplicationAPI.Contexts;

#nullable disable

namespace StudentManagementApplicationAPI.Migrations
{
    [DbContext(typeof(StudentManagementContext))]
    [Migration("20240530104036_Added FeesStrcuture")]
    partial class AddedFeesStrcuture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<double>("CourseFees")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.CourseRegistration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("RegistrationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseRegistrations");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"), 1L, 1);

                    b.Property<int?>("HeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DeptId");

                    b.HasIndex("HeadId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DeptId = 1,
                            HeadId = 102,
                            Name = "CSE"
                        });
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMark")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FacultyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            FacultyId = 101,
                            Address = "Chennai",
                            DOB = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "kousik@gmail.com",
                            Gender = "Male",
                            HashedPassword = new byte[] { 2, 42, 52, 211, 111, 238, 3, 77, 217, 33, 89, 164, 62, 62, 63, 174, 106, 162, 70, 234, 118, 90, 153, 113, 177, 130, 111, 95, 82, 198, 249, 62, 1, 191, 172, 194, 34, 221, 99, 167, 188, 229, 255, 71, 204, 196, 70, 129, 138, 120, 72, 196, 149, 251, 246, 90, 249, 81, 213, 76, 145, 140, 0, 230 },
                            Mobile = "9876523418",
                            Name = "Kousik Raj",
                            PasswordHashKey = new byte[] { 210, 251, 86, 136, 66, 179, 18, 103, 223, 188, 233, 98, 96, 65, 60, 168, 219, 122, 160, 58, 200, 147, 183, 227, 8, 166, 231, 157, 52, 17, 237, 133, 30, 255, 188, 249, 127, 58, 22, 54, 24, 57, 232, 18, 170, 29, 245, 12, 126, 145, 32, 204, 10, 117, 53, 36, 10, 28, 177, 89, 175, 194, 249, 15, 89, 10, 78, 111, 83, 161, 62, 177, 156, 57, 63, 92, 172, 68, 65, 227, 73, 87, 171, 45, 114, 246, 197, 174, 213, 76, 184, 235, 114, 56, 16, 249, 214, 233, 98, 24, 43, 176, 211, 53, 9, 117, 205, 184, 136, 21, 166, 28, 55, 101, 33, 78, 220, 116, 229, 149, 21, 192, 138, 253, 6, 205, 181, 55 },
                            Role = 0,
                            Status = 1
                        },
                        new
                        {
                            FacultyId = 102,
                            Address = "Kerala",
                            DOB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "dany@gmail.com",
                            Gender = "Male",
                            HashedPassword = new byte[] { 135, 252, 74, 112, 20, 143, 11, 140, 3, 146, 130, 27, 252, 181, 188, 104, 121, 187, 24, 47, 95, 8, 230, 145, 193, 54, 120, 71, 113, 113, 6, 238, 27, 125, 43, 141, 199, 34, 28, 114, 233, 141, 153, 190, 64, 112, 90, 227, 147, 6, 119, 52, 203, 113, 248, 78, 193, 200, 8, 62, 156, 246, 69, 217 },
                            Mobile = "9187632818",
                            Name = "Dany",
                            PasswordHashKey = new byte[] { 210, 251, 86, 136, 66, 179, 18, 103, 223, 188, 233, 98, 96, 65, 60, 168, 219, 122, 160, 58, 200, 147, 183, 227, 8, 166, 231, 157, 52, 17, 237, 133, 30, 255, 188, 249, 127, 58, 22, 54, 24, 57, 232, 18, 170, 29, 245, 12, 126, 145, 32, 204, 10, 117, 53, 36, 10, 28, 177, 89, 175, 194, 249, 15, 89, 10, 78, 111, 83, 161, 62, 177, 156, 57, 63, 92, 172, 68, 65, 227, 73, 87, 171, 45, 114, 246, 197, 174, 213, 76, 184, 235, 114, 56, 16, 249, 214, 233, 98, 24, 43, 176, 211, 53, 9, 117, 205, 184, 136, 21, 166, 28, 55, 101, 33, 78, 220, 116, 229, 149, 21, 192, 138, 253, 6, 205, 181, 55 },
                            Role = 4,
                            Status = -1
                        });
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluatedById")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ExamId1")
                        .HasColumnType("int");

                    b.Property<int>("MarksScored")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<int>("StudentGrade")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedById");

                    b.HasIndex("ExamId");

                    b.HasIndex("ExamId1");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Student", b =>
                {
                    b.Property<int>("StudentRollNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentRollNo"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<double>("EWallet")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StudentRollNo");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.StudentAttendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentRollNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentRollNo");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Course", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.CourseRegistration", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Course", "Course")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Department", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Faculty", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Exam", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Faculty", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Department", "Department")
                        .WithMany("Faculties")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Grade", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Faculty", "EvaluatedBy")
                        .WithMany()
                        .HasForeignKey("EvaluatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Exam", null)
                        .WithMany("Grades")
                        .HasForeignKey("ExamId1");

                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluatedBy");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Student", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.StudentAttendance", b =>
                {
                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementApplicationAPI.Models.Db_Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentRollNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Course", b =>
                {
                    b.Navigation("CourseRegistrations");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Department", b =>
                {
                    b.Navigation("Faculties");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementApplicationAPI.Models.Db_Models.Exam", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
